// src/components/ConfirmationPage.jsx

import React, { useState, useEffect } from 'react';
// ðŸŸ¢ Ajout de useNavigate et useLocation (useLocation est utilisÃ© pour la sÃ©curitÃ©)
import { useParams, useNavigate, useLocation } from 'react-router-dom'; 
import axios from 'axios';

const BASE_SERVER_URL = 'https://loto-backend-83zb.onrender.com/api/payments';
const CHECK_STATUS_URL = `${BASE_SERVER_URL}/status/`;

const ConfirmationPage = () => {
Â  Â  // Lit le 'token' depuis le chemin (/status/TOKEN_A_LIRE)
Â  Â  const { token: paymentToken } = useParams();Â 
    // ðŸŸ¢ Injection des fonctions de navigation
    const navigate = useNavigate();
    const location = useLocation();

Â  Â  const [statutPaiement, setStatutPaiement] = useState('loading');
Â  Â  const [codesTickets, setCodesTickets] = useState(null);
Â  Â  const [loading, setLoading] = useState(true);
Â  Â  const [message, setMessage] = useState("VÃ©rification du statut de votre paiement...");

Â  Â  useEffect(() => {
        // ðŸŽ¯ LOGIQUE DE NETTOYAGE DE L'HISTORIQUE (CORRECTION CRITIQUE)
        // On remplace l'entrÃ©e de l'historique (polluÃ©e par la redirection du Backend)
        // par l'URL actuelle et propre de la page de statut.
        // Cela garantit que le bouton "Retour" fonctionne correctement, sans revenir Ã  l'URL du Backend.
        
        // La condition `location.key === 'default'` est une technique courante
        // pour s'assurer que le remplacement n'est fait qu'au premier chargement (aprÃ¨s la redirection).
        if (location.key === 'default' && paymentToken) {
            navigate(location.pathname, { replace: true });
            // Note: Le code d'API ci-dessous s'exÃ©cutera juste aprÃ¨s, ce qui est normal.
        }
        
Â  Â  Â  Â  if (!paymentToken) {
Â  Â  Â  Â  Â  Â  setMessage("Jeton de paiement manquant. Impossible de vÃ©rifier la transaction.");
Â  Â  Â  Â  Â  Â  setStatutPaiement('error');
Â  Â  Â  Â  Â  Â  setLoading(false);
Â  Â  Â  Â  Â  Â  return;
Â  Â  Â  Â  }

Â  Â  Â  Â  const fetchStatus = async () => {
Â  Â  Â  Â  Â  Â  // ... (Le reste de votre logique d'appel API est inchangÃ©e)
Â  Â  Â  Â  Â  Â  try {
Â  Â  Â  Â  Â  Â  Â  Â  const response = await axios.get(`${CHECK_STATUS_URL}${paymentToken}`);

Â  Â  Â  Â  Â  Â  Â  Â  const data = response.data;
Â  Â  Â  Â  Â  Â  Â  Â  setStatutPaiement(data.status);

Â  Â  Â  Â  Â  Â  Â  Â  if (data.status === 'paid') {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  setCodesTickets(data.tickets);
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  setMessage("Votre paiement a Ã©tÃ© confirmÃ© avec succÃ¨s !");
Â  Â  Â  Â  Â  Â  Â  Â  } else if (data.status === 'pending') {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  setMessage("Le paiement est en attente. Si vous venez de payer, attendez quelques secondes puis rafraÃ®chissez.");
Â  Â  Â  Â  Â  Â  Â  Â  } else if (data.status === 'failed') {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  setMessage("Le paiement a Ã©chouÃ©. Veuillez recommencer le processus d'inscription.");
Â  Â  Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  } catch (err) {
Â  Â  Â  Â  Â  Â  Â  Â  console.error("Erreur de vÃ©rification du statut:", err);
Â  Â  Â  Â  Â  Â  Â  Â  setMessage("Erreur de communication avec le serveur pour vÃ©rifier la transaction.");
Â  Â  Â  Â  Â  Â  Â  Â  setStatutPaiement('error');
Â  Â  Â  Â  Â  Â  } finally {
Â  Â  Â  Â  Â  Â  Â  Â  setLoading(false);
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  };

Â  Â  Â  Â  fetchStatus();
Â  Â  }, [paymentToken, navigate, location.pathname, location.key]); // ðŸŸ¢ Ajout des dÃ©pendances de navigation

Â  Â  // ... (Le reste du code de rendu est inchangÃ©)
    // ... (renderStatus function)
    
    return (
        // ... (JSX du rendu)
        <div className="card-container" style={{ padding: '30px' }}>
            {/* ... */}
        </div>
    );
};

export default ConfirmationPage;
